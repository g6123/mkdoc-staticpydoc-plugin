{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocs-yaarg-plugin Y et A nother A PI R eference G enerator plugin for MKDocs . Installation Install package from PyPI, pip install mkdocs-yaarg-plugin then add it to mkdocs.yml : plugins: - yaarg Usage # API Reference ::: some/filepath/to/module.py WIP","title":"mkdocs-yaarg-plugin"},{"location":"#mkdocs-yaarg-plugin","text":"Y et A nother A PI R eference G enerator plugin for MKDocs .","title":"mkdocs-yaarg-plugin"},{"location":"#installation","text":"Install package from PyPI, pip install mkdocs-yaarg-plugin then add it to mkdocs.yml : plugins: - yaarg","title":"Installation"},{"location":"#usage","text":"# API Reference ::: some/filepath/to/module.py WIP","title":"Usage"},{"location":"api/generators/","text":"Generator yaarg.generators.base Provides base generator implementation and utilities to build generators. BaseGenerator Base class for yaarg generators. BaseGenerator#validate_options(options: dict) Validates generator options. Arguments Name Type Description Default options dict Raw options from markdown - Returns Type Description dict Validated options Details The result is used as options parameter for generate() method. BaseGenerator#generate(filepath: Path, symbol: Optional[str], options: dict) Reads the source code and generates markdown blocks. Decorators @abstractmethod Arguments Name Type Description Default filepath Path Path to the source code - symbol Optional[str] Symbol name - options dict Generator options. See also validate_options() . - Returns Type Description Iterable[\"markdown_block\"] Markdown blocks markdown_block Represents markdown blocks. markdown_block#write(text: str) Appends text to the last input. Arguments Name Type Description Default text str Appended text - Returns Type Description - - markdown_block#writeln(line: str) Appends text to the last input and insert line break. Arguments Name Type Description Default line str Appended line - Returns Type Description - - markdown_block#build() Builds final markdown block. Returns Type Description str Markdown block contents markdown_heading Represents markdown heading block. markdown_paragraph Represents markdown paragraph block.","title":"Generator"},{"location":"api/generators/#generator","text":"","title":"Generator"},{"location":"api/generators/#yaarggeneratorsbase","text":"Provides base generator implementation and utilities to build generators.","title":"yaarg.generators.base"},{"location":"api/generators/#basegenerator","text":"Base class for yaarg generators.","title":"BaseGenerator"},{"location":"api/generators/#basegeneratorvalidate_optionsoptions-dict","text":"Validates generator options.","title":"BaseGenerator#validate_options(options: dict)"},{"location":"api/generators/#arguments","text":"Name Type Description Default options dict Raw options from markdown -","title":"Arguments"},{"location":"api/generators/#returns","text":"Type Description dict Validated options","title":"Returns"},{"location":"api/generators/#details","text":"The result is used as options parameter for generate() method.","title":"Details"},{"location":"api/generators/#basegeneratorgeneratefilepath-path-symbol-optionalstr-options-dict","text":"Reads the source code and generates markdown blocks.","title":"BaseGenerator#generate(filepath: Path, symbol: Optional[str], options: dict)"},{"location":"api/generators/#decorators","text":"@abstractmethod","title":"Decorators"},{"location":"api/generators/#arguments_1","text":"Name Type Description Default filepath Path Path to the source code - symbol Optional[str] Symbol name - options dict Generator options. See also validate_options() . -","title":"Arguments"},{"location":"api/generators/#returns_1","text":"Type Description Iterable[\"markdown_block\"] Markdown blocks","title":"Returns"},{"location":"api/generators/#markdown_block","text":"Represents markdown blocks.","title":"markdown_block"},{"location":"api/generators/#markdown_blockwritetext-str","text":"Appends text to the last input.","title":"markdown_block#write(text: str)"},{"location":"api/generators/#arguments_2","text":"Name Type Description Default text str Appended text -","title":"Arguments"},{"location":"api/generators/#returns_2","text":"Type Description - -","title":"Returns"},{"location":"api/generators/#markdown_blockwritelnline-str","text":"Appends text to the last input and insert line break.","title":"markdown_block#writeln(line: str)"},{"location":"api/generators/#arguments_3","text":"Name Type Description Default line str Appended line -","title":"Arguments"},{"location":"api/generators/#returns_3","text":"Type Description - -","title":"Returns"},{"location":"api/generators/#markdown_blockbuild","text":"Builds final markdown block.","title":"markdown_block#build()"},{"location":"api/generators/#returns_4","text":"Type Description str Markdown block contents","title":"Returns"},{"location":"api/generators/#markdown_heading","text":"Represents markdown heading block.","title":"markdown_heading"},{"location":"api/generators/#markdown_paragraph","text":"Represents markdown paragraph block.","title":"markdown_paragraph"}]}